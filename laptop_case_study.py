# -*- coding: utf-8 -*-
"""Laptop_Case_Study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D5w5Id0q3l5moOayHa2xIAvmAz5PYdfb
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/laptop_data.csv')
df.head()

df.shape

df.info()

df = df.drop(['Unnamed: 0'], axis=1)

df['TypeName'].value_counts()

df['Ram'] = df['Ram'].str.replace('GB', '')

df['Ram'] = df['Ram'].astype(int)

df['Weight'] = df['Weight'].str.replace('kg', '')
df['Weight'] = df['Weight'].astype(float)

df.head()

df['ScreenResolution'].value_counts()

df['Touchscreen'] = df['ScreenResolution'].apply(lambda x:1 if 'Touchscreen' in x else 0)

df['IPS'] = df['ScreenResolution'].apply(lambda x:1 if 'IPS' in x else 0)

import re
pattern = r'(\d{3,4})x(\d{3,4})'
def extract_resolution(row):
  match = re.search(pattern, row)
  if match:
    x_resolution = int(match.group(1))
    y_resolution = int(match.group(2))
    return x_resolution, y_resolution
  else:
    return None, None

df[['x_resolution', 'y_resolution']] = df['ScreenResolution'].apply(lambda x:pd.Series(extract_resolution(x)))

df['ppi'] = (pow(pow(df['x_resolution'], 2) + pow(df['y_resolution'], 2), 0.5) /df['Inches'] ).astype(float)

df.drop(['x_resolution', 'y_resolution'], axis=1, inplace=True)

def fetch_cpu(data):
  if 'Intel' in data:
    return 'Intel'
  elif 'AMD' in data:
    return 'AMD Processor'
  return 'Other Processor'

df['Cpu Brand'] = df['Cpu'].apply(fetch_cpu)

df['Memory'].unique()

def extract_storage_size(memory):
    ssd_size = re.search(r'(\d+)(?:GB|TB) SSD', memory)
    hdd_size = re.search(r'(\d+)(?:GB|TB) HDD', memory)
    hybrid_size = re.search(r'(\d+(?:\.\d+)?)TB Hybrid', memory)
    flash_size = re.search(r'(\d+)GB Flash Storage', memory)

    ssd_size_gb = int(float(ssd_size.group(1)) * 1024) if ssd_size and 'TB' in ssd_size.group() else int(ssd_size.group(1)) if ssd_size else 0
    hdd_size_gb = int(hdd_size.group(1)) * 1024 if hdd_size and 'TB' in hdd_size.group() else int(hdd_size.group(1)) if hdd_size else 0
    hybrid_size_gb = int(float(hybrid_size.group(1)) * 1024) if hybrid_size else 0
    flash_size_gb = int(flash_size.group(1)) if flash_size else 0

    return ssd_size_gb, hdd_size_gb, hybrid_size_gb, flash_size_gb

df['SSD'], df['HDD'], df['Hybrid'], df['Flash Storage'] = zip(*df['Memory'].apply(extract_storage_size))

df['Gpu Brand'] = df['Gpu'].apply(lambda x:x.split()[0])
df.head()

df['Gpu Brand'].value_counts()

df.drop(['ScreenResolution', 'Cpu', 'Memory', 'Gpu'], inplace=True, axis=1)

df.info()

df.columns

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import r2_score, mean_squared_error, mean_absolute_error

X = df[['Inches', 'Ram', 'Weight', 'Touchscreen', 'IPS', 'ppi', 'SSD', 'HDD', 'Hybrid', 'Flash Storage']]
y = df['Price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)

model = LinearRegression()

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(r2_score(y_test, y_pred))

print(mean_squared_error(y_test, y_pred))

print(mean_absolute_error(y_test, y_pred))

"""Decision Tree"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.20, random_state=1)

model2 = DecisionTreeRegressor(max_depth=8)
model2.fit(X_train, y_train)
y_pred2 = model2.predict(X_test)
print ('R2 score', r2_score(y_test, y_pred2))

"""Random forest"""

model3 = RandomForestRegressor(n_estimators=120,
                              random_state=10,
                              max_samples=0.5,
                              max_features=0.75,
                              max_depth=10)
model3.fit(X_train, y_train)
y_pred3 = model3.predict(X_test)
print ('R2 score', r2_score(y_test, y_pred3))